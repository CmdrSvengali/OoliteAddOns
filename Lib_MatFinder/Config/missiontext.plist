{
	LIB_MATFS_Search = "Enter your search token. Up to 24 entries will be shown.\n\nThe search is case-sensitive.\n\nLeave empty to return to base list.";
	LIB_MATF_NOMAT = "This model doesn't have a materials definition,\nbut you can gererate a definition for it.\n\nAll you need to know is what the .dat file uses.";
	LIB_MATF_NOMAT_UPD = "Writing the subentities to the logfile offers an easy way to update oldstyle declarations.";
	LIB_MATF_GENMAT = "Enter the materials name.\n\nThe name must match the definition in the .dat file exactly.\nIf it doesn't, your generated material won't have any effect.\n\nIt's also necessary that the model has texture coordinates.\n\nLeave empty to return.";
	LIB_MATFS_ambient_color = "The ambient colour is the colour reflected evenly in all directions by starlight.\nIf there is a diffuse_map, the ambient_color is modulated by the diffuse_map.\nDefault: white (1.0, 1.0, 1.0, 1.0).";
	LIB_MATFS_anisotropy = "The degree of anisotropic filtering to use. Anisotropic filtering is used to reduce blurriness of MIP mapped textures shown at an angle (only applies to textures whose min_filter is mipmap or default). The anisotropy setting is multiplied by the maximum anisotropy level specified by the system, and anisotropic filtering is used only if the result is greater than 1. Default: 0.5.";
	LIB_MATFS_cube_map = "If this is true, and the texture file is six times as high as it is wide, the texture will be treated as a cube map. If cube maps are not supported, it will be converted to a latitude/longitude map. If used as a diffuse map or emission/illumination map, you must ensure the model has appropriate texture coordinates.";
	LIB_MATFS_diffuse_color = "Overall diffuse colour of the entity; that is, the colour reflected in a 'non-shiny' way on the sunlit side of the entity. If there is a diffuse_map, the diffuse_color is modulated by the diffuse_map. Default: white (1.0, 1.0, 1.0, 1.0).";
	LIB_MATFS_diffuse_map = "A texture specifying the basic colour of the material. This is a 'normal' texture, the same as you get without a material dictionary. If not specified, the material key will be used. To specify no texture, use an empty string for diffuse_map. Ignored when using shaders.";
	LIB_MATFS_emission_and_illumination_map = "A texture whose RGB channels act like emission_map, and whose alpha channel acts like illumination_map (and can be coloured with illumination_modulate_color). This uses less memory (on systems with shaders) than using separate shaders, although blending the emission and illumination maps into a single emission map, as described above, is still preferable.";
	LIB_MATFS_emission_color = "The emitted (glow) colour of the material. This is ignored when emission_map is in use (but see also: emission_modulate_color). Default: black (0.0, 0.0, 0.0, 1.0).";
	LIB_MATFS_emission_map = "A texture specifying emission (glow) colours. This is blended additively with all other colour terms. If emission_modulate_color is specified, the emission map is modulated by the modulate colour. Emission maps are used when shaders are active, and without shaders on supported hardware.";
	LIB_MATFS_emission_modulate_color = "A colour with which to modulate the emission_map. If the emission map is in full colour, it is best to apply the colouring in advance using a graphics program. However, if the emission map is a single colour, using a greyscale emission map and a modulate colour will reduce memory usage by a factor of four when shaders are in use. Default: white (1.0, 1.0, 1.0, 1.0).";
	LIB_MATFS_extract_channel = "Indicates that one of the channels of the texture should be extracted into a new greyscale texture. Allowed values: r, g, b and a. This obviously involves extra work for Oolite, which is always a bad thing, but it makes it possible to combine multiple effect maps in a single texture for shaders and then extract channels for use as emission or illumination maps without shipping a redundant texture";
	LIB_MATFS_gloss = "Gloss defines the sharpness of specular light or the width of the peak of specular. Introduced in Oolite v1.88. Gloss + specular is the combination Oolites new lighting system uses, shininess is ignored.";
	LIB_MATFS_illumination_map = "A texture specifying local illumination colour, which is added to incoming light. It differs from an emission map in that it is modulated with the diffuse colour before being added to the final colour.";
	LIB_MATFS_illumination_modulate_color = "A colour with which to modulate the illumination_map. Default: white (1.0, 1.0, 1.0, 1.0).";
	LIB_MATFS_mag_filter = "Specifies how to scale up the texture when it is near the camera. Either of: nearest (use nearest-neighbour sampling, which produces a pixellated effect), linear (use linear interpolation, which produces a blurry effect). Default: linear.";
	LIB_MATFS_min_filter = "Specifies how to scale down the texture when it is far from the camera. One of: nearest: nearest-neighbour sampling; generally very ugly, but sometimes useful for shaders. linear: efficient, but rather ugly for textures with significant contrast or details. mipmap: use trilinear MIP map filtering to improve scaling quality; generally also fast and least ugly, but uses 1/3 more memory. Default: linear in reduced detail mode, otherwise mipmap.";
	LIB_MATFS_name = "The file name of the texture to use. Must be a PNG image, in the Textures folder of Oolite or an OXP/OXZ. In the specific case of diffuse_map textures, name is implicitly the same as the material key; to use no texture, you must specify diffuse_map = ''.";
	LIB_MATFS_normal_and_parallax_map = "Like normal_map, except that the alpha channel is includes a depth value used to add simulated perspective. If specified, normal_map is ignored.";
	LIB_MATFS_normal_map = "A texture modifying normals. The red, green and blue channels are the x, y and z coordinates of normals relative to the underlying normal ('tangent-space normal mapping'), and the alpha channel is ingored. This is only used when shaders are active and no custom shader is used.";
	LIB_MATFS_no_shrink = "Indicates that Oolite should not scale the texture down, except to meet hardware requirements. Default: false.";
	LIB_MATFS_parallax_bias = "A value added to the parallax component of normal_and_parallax_map, after multiplying by parallax_scale (default: 0).";
	LIB_MATFS_parallax_scale = "A scale factor for the parallax component of normal_and_parallax_map (default: 0.01). This value is the depth of the parallax map relative to the size of the texture. For instance, a value of 0.01 on a texture 100 metres wide will produce a maximum indentation of 1 metre. High parallax_scale values tend to lead to unacceptable texture distortion and 'creeping' artefacts.";
	LIB_MATFS_repeat_s = "Whether Oolite should repeat the texture in the s (or u) co-ordinate, rather than clamping it. Default: false.";
	LIB_MATFS_repeat_t = "Whether Oolite should repeat the texture in the t (or v) co-ordinate, rather than clamping it. Default: false.";
	LIB_MATFS_shininess = "The 'tightness' of specular reflection, ranging from 0 to 128. 0 means no specular highlight. 128 is maximally shiny. Default: 128 if specular_map is used, 10 otherwise. Limitation: to use different shininess values with specular_map or specular_color, you must either use the default or use different 'shaders' and 'materials' dictionaries.\n\nIgnored in Oolites default shader!";
	LIB_MATFS_specular_color = "The colour to use for specular reflection over the entire model when specular_map is not used. The specular term is added to the diffuse term; for less intense specular highlights, use a darker colour. Default: black (0.0, 0.0, 0.0, 1.0) if shininess is zero, (0.2, 0.2, 0.2, 1.0) otherwise.";
	LIB_MATFS_specular_map = "A texture specifying the specular highlight colour in its red, green and blue channels, and shininess in its alpha channel. 1 (fully opaque) means the value of shininess is used. 0 means a very low shininess is used. This is only used when shaders are active and no custom shader is used.";
	LIB_MATFS_specular_modulate_color = "A colour with which to modulate the specular_map. Default: white (1.0, 1.0, 1.0, 1.0).";
	LIB_MATFS_texture_LOD_bias = "Tweak factor for MIP mapping (which does not apply to other min_filter modes). MIP mapping involves a trade-off between scaling artefacts and blurriness; the LOD (level of detail) bias affects this. Positive values mean more blur, negative ones mean more artefacts. The default value is −0.25 (mostly so people won’t say 'hey, why is everything blurrier in the new Oolite?'). Texture LOD bias is not available on all hardware.";
	LIB_MATFS_ColorDesc = "RGB and RGBA tuples (r,g,b,a): The values may range from 0 to 1 or 0 to 255. If no value is greater than 1, 0–1 is assumed, otherwise 0–255.\n\nExamples:  1 1 0  or  %[0,128,0,128%]  or  %[1,1,0,1%]\nDictionary: Accepted keys are red, green, blue and alpha (or opacity), all optional.\nDefault: 0.0 for red, green and blue, 1.0 for alpha.\nExample: {green=0.8;blue=0.2;}\n\nHSBA dictionaries: Accepted keys are hue (hue angle in degrees, required), saturation, brightness (or value) and alpha (or opacity). The default for the optional keys is 1.0.\nExample: {hue=300; saturation=0.3;}\n\nTo keep things unchanged, press 'Enter'.";
	LIB_MATFS_MapDesc = "Enter either the number of the listed textures or a texture filename.\nFilenames must include the file-extension '.png'.\nTo keep things unchanged, press 'Enter'.\n\nCurrent textures (includes textures of shaders):\n";
}
